#include <iostream>
#include <vector>
#include <string>
#include<cstdlib>
using namespace std;
// Task structure to store task details
struct Task {
     string description;
    bool completed;

    Task(const  string& desc) : description(desc), completed(false) {}
};

class TodoList {
private:
     vector<Task> tasks;

public:
    // Add a new task
    void addTask(const  string& description) {
        tasks.push_back(Task(description));
         cout << "Task added: " << description <<  endl;
         system("PAUSE");
         system("CLS");
    } 

    // View all tasks and their statuses
    void viewTasks() {
        if (tasks.empty()) {
             cout << "No tasks to display." <<  endl;
            return;
        }

         cout << "Tasks:" <<  endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
             cout << i + 1 << ". " << tasks[i].description;
            if (tasks[i].completed) {
                 cout << " [Completed]";
            }
             cout <<  endl;
        }system("PAUSE");
        system("CLS");
    }

    // Mark a task as completed
    void completeTask(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks[index - 1].completed = true;
             cout << "Task marked as completed." <<  endl;
        } else {
             cout << "Invalid task index." <<  endl;
        }system("PAUSE");
        system("CLS");
    }

    // Delete a task
    void deleteTask(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks.erase(tasks.begin() + index - 1);
             cout << "Task deleted." <<  endl;
        } else {
             cout << "Invalid task index." <<  endl;
        }system("PAUSE");
        system("CLS");
    }
};

int main() {
    TodoList todoList;

    while (true) {
         cout << "Options:" <<  endl;
         cout << "1. Add Task" <<  endl;
         cout << "2. View Tasks" <<  endl;
         cout << "3. Mark Task as Completed" <<  endl;
         cout << "4. Delete Task" <<  endl;
         cout << "5. Quit" <<  endl;

        int choice;
         cout << "Enter your choice: ";
         cin >> choice;

        switch (choice) {
            case 1: {
                 cin.ignore(); // Clear the newline character
                 string description;
                 cout << "Enter task description: ";
                 getline( cin, description);
                todoList.addTask(description);
                break;
            }
            case 2:
                todoList.viewTasks();
                break;
            case 3: {
                int index;
                 cout << "Enter the task index to mark as completed: ";
                 cin >> index;
                todoList.completeTask(index);
                break;
            }
            case 4: {
                int index;
                 cout << "Enter the task index to delete: ";
                 cin >> index;
                todoList.deleteTask(index);
                break;
            }
            case 5:
                 cout << "Exiting the program." <<  endl;
                return 0;
            default:
                 cout << "Invalid choice. Try again." <<  endl;
        }
    }

    return 0;
}
